{"version":3,"sources":["setupFirebase.js","components/styles/variables.js","components/styles/GlobalStyle.js","components/Navigation.js","pages/Home.js","pages/User.js","components/FirebaseAuth.js","components/Modal.js","pages/SignIn.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","variables","primaryRed","primaryYellow","primaryGreen","primaryBlue","primaryDark","primaryLight","primaryWhite","imageUrl","inn","mataura","mohaka","ngaruroro","taieri","primaryFont","headingFont","boxShadow","GlobalStyle","createGlobalStyle","props","theme","nightMode","styled","nav","Navigation","to","color","this","icon","faAdjust","onClick","toggleNightMode","Component","Home","User","state","isSignedIn","userName","unregisterAuthObserver","auth","onAuthStateChanged","user","setState","currentUser","history","push","uiConfig","signInFlow","signInSuccessUrl","signInOptions","EmailAuthProvider","PROVIDER_ID","GoogleAuthProvider","GithubAuthProvider","firebaseAuth","React","ModalContainer","div","Image","img","ContentContainer","Modal","src","alt","SignIn","App","storage","getItem","setItem","toggleTheme","getInitalTheme","savedNightMode","JSON","parse","console","log","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yMAGAA,IAASC,cAAc,CACnBC,OAAQC,0CACRC,WAAYD,uCACZE,UAAWF,yB,yGCNFG,EAAY,CAErBC,WAAY,UACZC,cAAe,UACfC,aAAc,UACdC,YAAa,UACbC,YAAa,UACbC,aAAc,UACdC,aAAc,UAGdC,SAAU,CACNC,IAAK,+CACLC,QAAS,mDACTC,OAAQ,kDACRC,UAAW,qDACXC,OAAQ,mDAIZC,YAAa,wBACbC,YAAa,4BAGbC,UAAW,+B,6eCrBf,IA0BeC,EA1BKC,YAAH,KAYO,SAAAC,GAAK,MACC,UAA1BA,EAAMC,MAAMC,UAAwBrB,EAAUK,YAAcL,EAAUO,gBAC7D,SAAAY,GAAK,MACY,UAA1BA,EAAMC,MAAMC,UAAwBrB,EAAUO,aAAeP,EAAUK,cACxDL,EAAUc,YAIVd,EAAUe,a,0GCfdO,IAAOC,IAAV,KAAZ,IAIqBC,E,uKAOb,OACI,6BACI,kBAAC,IAAD,CAAMC,GAAG,SAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,cACA,kBAAC,IAAD,CAAiBC,MAAgC,UAAzBC,KAAKR,MAAME,UAAwBrB,EAAUO,aAAeP,EAAUK,YAAauB,KAAMC,IAAUC,QAASH,KAAKR,MAAMY,uB,GAZvHC,aCPnBC,E,uKAMb,OACI,6BACI,kBAAC,EAAD,CAAYF,gBAAiBJ,KAAKR,MAAMY,gBAAiBV,UAAWM,KAAKR,MAAME,YAC/E,kE,GATkBW,aCFbE,E,4MACjBC,MAAQ,CACJC,YAAY,EACZC,SAAU,I,kEAGO,IAAD,OAChBV,KAAKW,uBAAyB5C,IAAS6C,OAAOC,oBAC1C,SAAAC,GACI,EAAKC,SAAS,CAAEN,aAAcK,EAAMJ,SAAU3C,IAAS6C,OAAOI,cAE1DF,GACA,EAAKtB,MAAMyB,QAAQC,KAAK,U,6CAMjClB,KAAKW,wBACJX,KAAKW,2B,+BAIT,OACI,6BACI,sD,GAzBkBN,a,kCCCbC,E,4MACjBa,SAAW,CAEPC,WAAY,QAEZC,iBAAkB,uBAElBC,cAAe,CACbvD,IAAS6C,KAAKW,kBAAkBC,YAChCzD,IAAS6C,KAAKa,mBAAmBD,YACjCzD,IAAS6C,KAAKc,mBAAmBF,c,uDAKjC,OAAO,kBAAC,IAAD,CAAoBL,SAAUnB,KAAKmB,SAAUQ,aAAc5D,IAAS6C,a,GAfnDgB,IAAMvB,W,01BCExC,IAAMwB,EAAiBlC,IAAOmC,IAAV,IASIzD,EAAUO,aAKhBP,EAAUgB,WAGtB0C,EAAQpC,IAAOqC,IAAV,KAMLC,EAAmBtC,IAAOmC,IAAV,KAKE,SAAAtC,GAAK,MACC,UAA1BA,EAAMC,MAAMC,UAAwBrB,EAAUK,YAAcL,EAAUO,gBAOrDsD,E,uKAKP,IACEzC,EAAUO,KAAKR,MAAfC,MACR,OACI,kBAACoC,EAAD,KACI,kBAACE,EAAD,CAAOI,IAAK9D,EAAUQ,SAASY,GAAQ2C,IAAI,KAC3C,kBAACH,EAAD,KACI,6BACI,2DACA,kBAAC,EAAD,a,GAbW5B,aCtCdgC,E,uKAKb,OACI,6BACI,kBAAC,EAAD,CAAO5C,MAAOO,KAAKR,MAAMC,a,GAPLY,aCoDrBiC,E,4MA9Cb9B,MAAQ,CACNd,UAAW6C,IAAQC,QAAQ,aAAeD,IAAQC,QAAQ,aAAe,QACzE/C,MAAO8C,IAAQC,QAAQ,SAAWD,IAAQC,QAAQ,SAAW,U,EAG/DpC,gBAAkB,WACY,UAAzB,EAAKI,MAAMd,WACZ,EAAKqB,SAAS,CAAErB,UAAW,SAC3B6C,IAAQE,QAAQ,YAAa,UAE7B,EAAK1B,SAAS,CAAErB,UAAW,UAC3B6C,IAAQE,QAAQ,YAAa,W,EAIjCC,YAAc,SAACjD,GACb,EAAKsB,SAAS,CAAEtB,UAChB8C,IAAQE,QAAQ,QAAShD,I,EAG3BkD,eAAiB,WACf,IAAMC,EAAiBL,IAAQC,QAAQ,aACvC,QAAOI,GAAiBC,KAAKC,MAAMF,I,uDAKjC,OADFG,QAAQC,IAAIhD,KAAKQ,OAEb,kBAAC,IAAD,CAAQyC,SAAS,mBACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAexD,MAAO,CAAEC,UAAWM,KAAKQ,MAAMd,YAC5C,kBAAC,IAAD,CAAOwD,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAM/C,gBAAiBJ,KAAKI,gBAAiBV,UAAWM,KAAKQ,MAAMd,aAErE,kBAAC,IAAD,CAAOyD,KAAK,QAAQC,UAAW7C,IAC/B,kBAAC,IAAD,CAAO4C,KAAK,mBACV,kBAAC,EAAD,CAAQ1D,MAAOO,KAAKQ,MAAMf,SAE5B,kBAAC,EAAD,a,GAvCEmC,IAAMvB,WCGJgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.9e46f220.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nfirebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID\r\n});\r\n","export const variables = {\r\n    //Color Variables\r\n    primaryRed: \"#F45B0F\",\r\n    primaryYellow: \"#FFD726\",\r\n    primaryGreen: \"#94C0D4\",\r\n    primaryBlue: \"#048ECB\",\r\n    primaryDark: \"#161616\",\r\n    primaryLight: \"#E6E6E6\",\r\n    primaryWhite: \"#fdfdfe\",\r\n\r\n    //images \r\n    imageUrl: {\r\n        inn: \"/dictionaryApp/static/media/Inn.64bd2963.svg\",\r\n        mataura: \"/dictionaryApp/static/media/Mataura.4afff881.svg\",\r\n        mohaka: \"/dictionaryApp/static/media/Mohaka.c27f4bb0.svg\",\r\n        ngaruroro: \"/dictionaryApp/static/media/Ngaruroro.8a341e3a.svg\",\r\n        taieri: \"/dictionaryApp/static/media/Taieri.cf3c80a0.svg\",\r\n    },\r\n\r\n    //Typography Variables\r\n    primaryFont: \"'Raleway', sans-serif\",\r\n    headingFont: \"'Playfair Display', serif\",\r\n\r\n    //Other Variables\r\n    boxShadow: \"2px 2px 5px rgba(0,0,0,0.2)\"\r\n}","import { createGlobalStyle } from 'styled-components';\r\nimport { variables } from './variables';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  -webkit-box-sizing: border-box;\r\n  -moz-box-sizing: border-box;\r\n  box-sizing: border-box;\r\n}\r\n*, *:before, *:after {\r\n  -webkit-box-sizing: inherit;\r\n  -moz-box-sizing: inherit;\r\n  box-sizing: inherit;\r\n}\r\nbody {\r\n    background-color: ${props =>\r\n    props.theme.nightMode === \"light\" ? variables.primaryDark : variables.primaryWhite };\r\n    color: ${props =>\r\n    props.theme.nightMode === \"light\" ? variables.primaryWhite : variables.primaryDark};\r\n    font-family: ${variables.primaryFont};\r\n    text-align: center;\r\n}\r\nh1, h2, h3, h4, h5, h6 {\r\n    font-family: ${variables.headingFont};\r\n    font-weight: 400;\r\n    margin-bottom: 3rem;\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faAdjust } from '@fortawesome/free-solid-svg-icons'\r\nimport { variables } from '../components/styles/variables';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NavBar = styled.nav`\r\n\r\n`\r\n\r\nexport default class Navigation extends Component {\r\n    static propTypes = {\r\n        nightMode: PropTypes.string,\r\n        toggleNightMode: PropTypes.func,\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Link to=\"/user\">User</Link>\r\n                <Link to=\"/\">Home</Link>\r\n                <Link to=\"/errror\">Error Page</Link>\r\n                <FontAwesomeIcon color={this.props.nightMode === \"light\" ? variables.primaryWhite : variables.primaryDark} icon={faAdjust} onClick={this.props.toggleNightMode} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport Navigation from '../components/Navigation';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default class Home extends Component {\r\n    static propTypes = {\r\n        nightMode: PropTypes.string,\r\n        toggleNightMode: PropTypes.func,\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navigation toggleNightMode={this.props.toggleNightMode} nightMode={this.props.nightMode} />\r\n                <h1>Welcome to the Dictionary App</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport firebase from 'firebase/app';\r\n\r\nexport default class User extends Component {\r\n    state = {\r\n        isSignedIn: false,\r\n        userName: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\r\n            user => {\r\n                this.setState({ isSignedIn: !!user, userName: firebase.auth().currentUser })\r\n                //Redirects to home page if not logged in \r\n                if(!user){\r\n                    this.props.history.push('/');\r\n                }\r\n            });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if(this.unregisterAuthObserver){\r\n            this.unregisterAuthObserver();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>You are logged in</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\nimport firebase from 'firebase';\r\n\r\nexport default class Home extends React.Component {\r\n    uiConfig = {\r\n        // Popup signin flow rather than redirect flow.\r\n        signInFlow: 'popup',\r\n        // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\r\n        signInSuccessUrl: '/dictionaryApp#/user',\r\n        // We will display Google and Facebook as auth providers.\r\n        signInOptions: [\r\n          firebase.auth.EmailAuthProvider.PROVIDER_ID,\r\n          firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n          firebase.auth.GithubAuthProvider.PROVIDER_ID\r\n        ]\r\n      };\r\n\r\n      render() {\r\n          return <StyledFirebaseAuth uiConfig={this.uiConfig} firebaseAuth={firebase.auth()}/>\r\n      }\r\n}","import React, { Component } from 'react';\r\nimport { variables } from '../components/styles/variables';\r\nimport styled from 'styled-components';\r\nimport FirebaseAuth from './FirebaseAuth';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ModalContainer = styled.div`\r\n    position: fixed;\r\n    top: 50%;\r\n    right: 50%;\r\n    transform: translate(50%,-50%);\r\n    max-height: 500px;\r\n    max-width: 700px;\r\n    width: 90%;\r\n    height: 90%;\r\n    background-color: ${variables.primaryWhite};\r\n    border-radius: 1rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    box-shadow: ${variables.boxShadow};\r\n`;\r\n\r\nconst Image = styled.img`\r\n    height: 100%;\r\n    width: 100%;\r\n    object-fit: cover;\r\n    border-radius: 1rem;\r\n` \r\nconst ContentContainer = styled.div`\r\n    height: 90%;\r\n    width: 90%;\r\n    border-radius: 1rem;\r\n    position: fixed;\r\n    background-color: ${props =>\r\n    props.theme.nightMode === \"light\" ? variables.primaryDark : variables.primaryWhite };\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    box-shadow: 1px 1px 3px rgba(0,0,0,0.1);\r\n`;\r\n\r\nexport default class Modal extends Component {\r\n    static propTypes = {\r\n        theme: PropTypes.string,\r\n    }\r\n    \r\n    render() {\r\n        const { theme } = this.props;\r\n        return (\r\n            <ModalContainer>\r\n                <Image src={variables.imageUrl[theme]} alt=\"\" />\r\n                <ContentContainer>\r\n                    <div>\r\n                        <h1>Create an Account or Log In</h1>\r\n                        <FirebaseAuth />\r\n                    </div>\r\n                </ContentContainer>\r\n            </ModalContainer>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Modal from '../components/Modal';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class SignIn extends Component {\r\n    static propTypes = {\r\n        theme: PropTypes.string,\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Modal theme={this.props.theme} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider } from 'styled-components';\nimport GlobalStyle from './components/styles/GlobalStyle';\nimport storage from 'local-storage-fallback';\nimport Home from './pages/Home';\nimport User from './pages/User';\nimport SignIn from './pages/SignIn';\n\nclass App extends React.Component {\n  state = {\n    nightMode: storage.getItem(\"nightMode\") ? storage.getItem(\"nightMode\") : \"light\",\n    theme: storage.getItem(\"theme\") ? storage.getItem(\"theme\") : \"mohaka\",\n  }\n\n  toggleNightMode = () => {\n    if(this.state.nightMode === \"light\"){\n      this.setState({ nightMode: \"dark\" })\n      storage.setItem(\"nightMode\", \"dark\");\n    } else {\n      this.setState({ nightMode: \"light\" });\n      storage.setItem(\"nightMode\", \"light\");\n    }\n  }\n\n  toggleTheme = (theme) => {\n    this.setState({ theme })\n    storage.setItem(\"theme\", theme)\n  }\n\n  getInitalTheme = () => {\n    const savedNightMode = storage.getItem(\"nightMode\");\n    return savedNightMode ? JSON.parse(savedNightMode) : false;\n  }\n\n  render() {\n    console.log(this.state)\n      return (\n        <Router basename=\"/dictionaryApp/\">\n          <Switch>\n              <ThemeProvider theme={{ nightMode: this.state.nightMode }}>\n                <Route exact path=\"/\">\n                  <Home toggleNightMode={this.toggleNightMode} nightMode={this.state.nightMode} />\n                </Route>\n                <Route path=\"/user\" component={User} />\n                <Route path=\"/create-account\">\n                  <SignIn theme={this.state.theme} />\n                </Route>\n                <GlobalStyle />\n              </ThemeProvider>\n          </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './setupFirebase';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}